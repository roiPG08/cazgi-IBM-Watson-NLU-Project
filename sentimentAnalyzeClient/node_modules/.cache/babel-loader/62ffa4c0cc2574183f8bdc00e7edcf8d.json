{"ast":null,"code":"var _jsxFileName = \"/home/project/cazgi-IBM-Watson-NLU-Project/sentimentAnalyzeClient/src/App.js\";\nimport './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      innercomp: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"4\",\n        cols: \"50\",\n        id: \"textinput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 22\n      }, this),\n      mode: \"text\",\n      sentimentOutput: [],\n      sentiment: true\n    };\n\n    this.renderTextArea = () => {\n      document.getElementById(\"textinput\").value = \"\";\n\n      if (this.state.mode === \"url\") {\n        this.setState({\n          innercomp: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"4\",\n            cols: \"50\",\n            id: \"textinput\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 32\n          }, this),\n          mode: \"text\",\n          sentimentOutput: [],\n          sentiment: true\n        });\n      }\n    };\n\n    this.renderTextBox = () => {\n      document.getElementById(\"textinput\").value = \"\";\n\n      if (this.state.mode === \"text\") {\n        this.setState({\n          innercomp: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"1\",\n            cols: \"50\",\n            id: \"textinput\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 32\n          }, this),\n          mode: \"url\",\n          sentimentOutput: [],\n          sentiment: true\n        });\n      }\n    };\n\n    this.sendForSentimentAnalysis = () => {\n      this.setState({\n        sentiment: true\n      });\n      let url = \".\";\n\n      if (this.state.mode === \"url\") {\n        url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n      } else {\n        url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n      }\n\n      fetch(url).then(response => {\n        response.text().then(data => {\n          this.setState({\n            sentimentOutput: data\n          });\n          let output = data;\n\n          if (data === \"positive\") {\n            output = /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"green\",\n                fontSize: 20\n              },\n              children: data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 20\n            }, this);\n          } else if (data === \"negative\") {\n            output = /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"red\",\n                fontSize: 20\n              },\n              children: data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 20\n            }, this);\n          } else {\n            output = /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"yellow\",\n                fontSize: 20\n              },\n              children: data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 20\n            }, this);\n          }\n\n          this.setState({\n            sentimentOutput: output\n          });\n        });\n      });\n    };\n\n    this.sendForEmotionAnalysis = () => {\n      this.setState({\n        sentiment: false\n      });\n      let url = \".\";\n\n      if (this.state.mode === \"url\") {\n        url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n      } else {\n        url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n      }\n\n      fetch(url).then(response => {\n        response.json().then(data => {\n          this.setState({\n            sentimentOutput: /*#__PURE__*/_jsxDEV(EmotionTable, {\n              emotions: data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 38\n            }, this)\n          });\n        });\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-info\",\n        onClick: this.renderTextArea,\n        children: \"Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-dark\",\n        onClick: this.renderTextBox,\n        children: \"URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 14\n      }, this), this.state.innercomp, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: this.sendForSentimentAnalysis,\n        children: \"Analyze Sentiment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: this.sendForEmotionAnalysis,\n        children: \"Analyze Emotion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), this.state.sentimentOutput]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/project/cazgi-IBM-Watson-NLU-Project/sentimentAnalyzeClient/src/App.js"],"names":["EmotionTable","React","App","Component","state","innercomp","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","fetch","then","response","text","data","output","color","fontSize","sendForEmotionAnalysis","json","render"],"mappings":"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","sourcesContent":["import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    fetch(url).then((response)=>{\n        response.text().then((data)=>{\n        this.setState({sentimentOutput:data});\n        let output = data;\n        if(data === \"positive\") {\n          output = <div style={{color:\"green\",fontSize:20}}>{data}</div>\n        } else if (data === \"negative\"){\n          output = <div style={{color:\"red\",fontSize:20}}>{data}</div>\n        } else {\n          output = <div style={{color:\"yellow\",fontSize:20}}>{data}</div>\n        }\n        this.setState({sentimentOutput:output});\n      })});\n  }\n\n  sendForEmotionAnalysis = () => {\n\n    this.setState({sentiment:false});\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n    fetch(url).then((response)=>{\n      response.json().then((data)=>{\n      this.setState({sentimentOutput:<EmotionTable emotions={data}/>});\n  })})  ;\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}